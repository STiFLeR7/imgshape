name: imgshape CI

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml','**/setup.py','**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system deps (runtime libs)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libgl1-mesa-glx libglib2.0-0

      - name: Install package in editable mode with extras (dev + full)
        run: |
          python -m pip install --upgrade pip wheel setuptools build
          pip install -e ".[dev,full]"

      - name: Prepare test image
        run: |
          mkdir -p sample
          if [ -f assets/sample_images/Image_created_with_a_mobile_phone.png ]; then
            cp assets/sample_images/Image_created_with_a_mobile_phone.png sample/test.png
          else
            curl -fsSLo sample/test.png https://raw.githubusercontent.com/STiFLeR7/imgshape/master/assets/sample_images/Image_created_with_a_mobile_phone.png || true
            if [ ! -f sample/test.png ]; then
              curl -fsSLo sample/test.png https://upload.wikimedia.org/wikipedia/commons/7/77/Delete_key1.jpg || true
            fi
          fi

      - name: Lint (flake8)
        run: |
          pip install flake8
          flake8 src tests || true

      - name: Type-check (mypy)
        run: |
          pip install mypy
          mypy src || true

      # ---- CLI Smoke Tests (non-blocking/gentle) ----
      - name: CLI Test - Help
        run: imgshape --help || true

      - name: CLI Test - Version
        run: imgshape --version || true

      - name: CLI Test - Shape detection
        run: python -m imgshape.cli --path sample/test.png --shape || true

      - name: CLI Test - Analysis
        run: python -m imgshape.cli --path sample/test.png --analyze || true

      - name: CLI Test - Recommendation
        run: python -m imgshape.cli --path sample/test.png --recommend --augment || true

      - name: CLI Test - Report (Markdown)
        run: python -m imgshape.cli --path sample --report --augment --out tmp/ci_report.md || true

      - name: CLI Test - Report (HTML)
        run: python -m imgshape.cli --path sample --report --augment --out tmp/ci_report.html || true

      - name: CLI Test - Visualization (non-blocking)
        shell: bash
        run: |
          echo "Running visualization smoke test (safe, no heredoc)..."
          SCRIPT_PATH="/tmp/plot_test.py"
          # Use printf with escaped newlines to avoid YAML/heredoc issues in editors
          printf '%s\n' "import sys" \
            "from pathlib import Path" \
            "" \
            "try:" \
            "    from imgshape.viz import plot_shape_distribution" \
            "except Exception as e:" \
            "    print('Could not import imgshape.viz:', e, file=sys.stderr)" \
            "    sys.exit(0)" \
            "" \
            "try:" \
            "    out = plot_shape_distribution('sample', save=False)" \
            "    print('plot result type:', type(out))" \
            "    try:" \
            "        if hasattr(out, 'write_html'):" \
            "            Path('tmp').mkdir(parents=True, exist_ok=True)" \
            "            out.write_html('tmp/ci_shape_plot.html')" \
            "            print('Wrote tmp/ci_shape_plot.html')" \
            "    except Exception as ex:" \
            "        print('Could not write interactive plot (allowed):', ex)" \
            "except Exception as e:" \
            "    print('plot_shape_distribution failed (allowed):', e, file=sys.stderr)" \
            > "$SCRIPT_PATH"
          python "$SCRIPT_PATH" || true

      - name: CLI Test - Model Compatibility (non-blocking)
        run: python -m imgshape.cli --dir sample --check mobilenet_v2 || true

      - name: CLI Test - TorchLoader (transform snippet, non-blocking)
        run: python -m imgshape.cli --path sample --torchloader --out tmp/transform_snippet.py || true

      # ---- Unit Tests ----
      - name: Run pytest
        run: pytest -q --disable-warnings --maxfail=1

      # ---- Build & metadata checks ----
      - name: Build distributions
        run: python -m build

      - name: Twine check
        run: |
          pip install twine
          twine check dist/* || true

      - name: Upload artifacts (test logs + distributions)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            dist
            build
            tmp || true
            imgshape_report.* || true
            pytest-report.xml || true
